{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"n_",
				"n_x_"
			],
			[
				"S",
				"Si"
			],
			[
				"M",
				"MatrixXd"
			],
			[
				"H",
				"Ht"
			],
			[
				"u",
				"urlopen"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/uids6815/Crackcode/Sublime/Data/Packages/LineEndings/LineEndings.sublime-settings",
			"settings":
			{
				"buffer_size": 242,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 7187,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/measurement_package.h",
			"settings":
			{
				"buffer_size": 276,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tools.h",
			"settings":
			{
				"buffer_size": 432,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tools.cpp",
			"settings":
			{
				"buffer_size": 1098,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ukf.cpp",
			"settings":
			{
				"buffer_size": 25067,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ukf.h",
			"settings":
			{
				"buffer_size": 3345,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeAStyleFormatter\n----------------------\n\n  SublimeAStyleFormatter\n  ======================\n  \n  SublimeAStyleFormatter is a simple code formatter plugin for Sublime Text 2.\n  It provides ability to format C, C++, C#, and Java files.\n  \n  Usage\n  -----\n  ### Key Bindings\n  The default key bindings for this plugin:\n  \n  **Windows, Linux:**\n  + `ctrl+alt+f`: Format current file\n  + `ctrl+k, ctrl+f`: Format current selection\n  \n  **OSX:**\n  + `ctrl+alt+f`: Format current file\n  + `super+k,super+f`: Format current selection\n  \n  ### Command Palette\n  Open the command palette, it apperas as `SublimeAStyleFormatter: Format Current File`\n  and `SublimeAStyleFormatter Format Current Selection`.\n",
			"settings":
			{
				"buffer_size": 752,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "Searching 393 files for \"L\" (case sensitive, whole word)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\3.5.1\\CMakeDetermineCompilerABI_C.bin:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\3.5.1\\CMakeDetermineCompilerABI_CXX.bin:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\3.5.1\\CompilerIdC\\a.out:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\3.5.1\\CompilerIdCXX\\a.out:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\CMakeOutput.log:\n   61  LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/\n   62  COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_394e5' '-rdynamic' '-mtune=generic' '-march=x86-64'\n   63:  /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccFeqjc7.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_394e5 /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_394e5.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o\n   64  make[1]: Leaving directory '/mnt/hgfs/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/build/CMakeFiles/CMakeTmp'\n   65  \n   ..\n   87    ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/]\n   88    ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_394e5' '-rdynamic' '-mtune=generic' '-march=x86-64']\n   89:   link line: [ /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccFeqjc7.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_394e5 /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_394e5.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o]\n   90      arg [/usr/lib/gcc/x86_64-linux-gnu/5/collect2] ==> ignore\n   91      arg [-plugin] ==> ignore\n   ..\n  114      arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o] ==> ignore\n  115      arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o] ==> ignore\n  116:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5]\n  117:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu]\n  118:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib]\n  119:     arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]\n  120:     arg [-L/lib/../lib] ==> dir [/lib/../lib]\n  121:     arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]\n  122:     arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]\n  123:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..]\n  124      arg [CMakeFiles/cmTC_394e5.dir/CMakeCCompilerABI.c.o] ==> ignore\n  125      arg [-lgcc] ==> lib [gcc]\n  ...\n  246  LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/\n  247  COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_80dcc' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n  248:  /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccdVhiuD.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_80dcc /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_80dcc.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o\n  249  make[1]: Leaving directory '/mnt/hgfs/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/build/CMakeFiles/CMakeTmp'\n  250  \n  ...\n  272    ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/]\n  273    ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_80dcc' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=x86-64']\n  274:   link line: [ /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccdVhiuD.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_80dcc /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_80dcc.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o]\n  275      arg [/usr/lib/gcc/x86_64-linux-gnu/5/collect2] ==> ignore\n  276      arg [-plugin] ==> ignore\n  ...\n  299      arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o] ==> ignore\n  300      arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o] ==> ignore\n  301:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5]\n  302:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu]\n  303:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib]\n  304:     arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]\n  305:     arg [-L/lib/../lib] ==> dir [/lib/../lib]\n  306:     arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]\n  307:     arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]\n  308:     arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..]\n  309      arg [CMakeFiles/cmTC_80dcc.dir/CMakeCXXCompilerABI.cpp.o] ==> ignore\n  310      arg [-lstdc++] ==> lib [stdc++]\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\CMakeFiles\\feature_tests.bin:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\build\\UnscentedKF:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\output_images\\augmented_2_predict.PNG:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\roadmap.png:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\segmentationfault.PNG:\n    <binary>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\CholmodSupport:\n   16    * It provides the two following main factorization classes:\n   17    * - class CholmodSupernodalLLT: a supernodal LLT Cholesky factorization.\n   18:   * - class CholmodDecomposiiton: a general L(D)LT Cholesky factorization with automatic or explicit runtime selection of the underlying factorization method (supernodal or simplicial).\n   19    *\n   20    * For the sake of completeness, this module also propose the two following classes:\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Cholesky\\LDLT.h:\n   34    *\n   35    * Perform a robust Cholesky decomposition of a positive semidefinite or negative semidefinite\n   36:   * matrix \\f$ A \\f$ such that \\f$ A =  P^TLDL^*P \\f$, where P is a permutation matrix, L\n   37    * is lower triangular with a unit diagonal and D is a diagonal matrix.\n   38    *\n   39:   * The decomposition uses pivoting to ensure stability, so that L will have\n   40    * zeros in the bottom right rank(A) - n submatrix. Avoiding the square root\n   41    * on D also stabilizes the computation.\n   ..\n  124      }\n  125  \n  126:     /** \\returns a view of the lower triangular matrix L */\n  127      inline typename Traits::MatrixL matrixL() const\n  128      {\n  ...\n  173        * \\note_about_checking_solutions\n  174        *\n  175:       * More precisely, this method solves \\f$ A x = b \\f$ using the decomposition \\f$ A = P^T L D L^* P \\f$\n  176:       * by solving the systems \\f$ P^T y_1 = b \\f$, \\f$ L y_2 = y_1 \\f$, \\f$ D y_3 = y_2 \\f$, \n  177:       * \\f$ L^* y_4 = y_3 \\f$ and \\f$ P x = y_4 \\f$ in succession. If the matrix \\f$ A \\f$ is singular, then\n  178        * \\f$ D \\f$ will also be singular (all the other matrices are invertible). In that case, the\n  179        * least-square solution of \\f$ D y_3 = y_2 \\f$ is computed. This does not mean that this function\n  ...\n  243  \n  244      /** \\internal\n  245:       * Used to compute and store the Cholesky decomposition A = L D L^* = U^* D U.\n  246        * The strict upper part is used during the decomposition, the strict lower\n  247:       * part correspond to the coefficients of L (its diagonal is equal to 1 and\n  248        * is not stored), and the diagonal entries correspond to D.\n  249        */\n  ...\n  381  \n  382  \n  383:       // Update the terms of L\n  384        Index rs = size-j-1;\n  385        w.tail(rs) -= wj * mat.col(j).tail(rs);\n  ...\n  435  } // end namespace internal\n  436  \n  437: /** Compute / recompute the LDLT decomposition A = L D L^* = U^* D U of \\a matrix\n  438    */\n  439  template<typename MatrixType, int _UpLo>\n  ...\n  458  }\n  459  \n  460: /** Update the LDLT decomposition:  given A = L D L^T, efficiently compute the decomposition of A + sigma w w^T.\n  461   * \\param w a vector to be incorporated into the decomposition.\n  462   * \\param sigma a scalar, +1 for updates and -1 for \"downdates,\" which correspond to removing previously-added column vectors. Optional; default value is +1.\n  ...\n  503      dst = dec().transpositionsP() * rhs();\n  504  \n  505:     // dst = L^-1 (P b)\n  506      dec().matrixL().solveInPlace(dst);\n  507  \n  508:     // dst = D^-1 (L^-1 P b)\n  509      // more precisely, use pseudo-inverse of D (see bug 241)\n  510      using std::abs;\n  ...\n  528      }\n  529  \n  530:     // dst = L^-T (D^-1 L^-1 P b)\n  531      dec().matrixU().solveInPlace(dst);\n  532  \n  533:     // dst = P^-1 (L^-T D^-1 L^-1 P b) = A^-1 b\n  534      dst = dec().transpositionsP().transpose() * dst;\n  535    }\n  ...\n  563  \n  564  /** \\returns the matrix represented by the decomposition,\n  565:  * i.e., it returns the product: P^T L D L^* P.\n  566   * This function is provided for debug purpose. */\n  567  template<typename MatrixType, int _UpLo>\n  ...\n  575    res.setIdentity();\n  576    res = transpositionsP() * res;\n  577:   // L^* P\n  578    res = matrixU() * res;\n  579:   // D(L^*P)\n  580    res = vectorD().real().asDiagonal() * res;\n  581:   // L(DL^*P)\n  582    res = matrixL() * res;\n  583    // P^T (LDL^*P)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Cholesky\\LLT.h:\n   28    *\n   29    * This class performs a LL^T Cholesky decomposition of a symmetric, positive definite\n   30:   * matrix A such that A = LL^* = U^*U, where L is lower triangular.\n   31    *\n   32    * While the Cholesky decomposition is particularly useful to solve selfadjoint problems like  D^*D x = b,\n   ..\n  101      }\n  102  \n  103:     /** \\returns a view of the lower triangular matrix L */\n  104      inline typename Traits::MatrixL matrixL() const\n  105      {\n  ...\n  182      \n  183      /** \\internal\n  184:       * Used to compute and store L\n  185        * The strict upper part is not used and even not initialized.\n  186        */\n  ...\n  252        beta += swj2/dj;\n  253  \n  254:       // Update the terms of L\n  255        Index rs = n-j-1;\n  256        if(rs)\n  ...\n  465  \n  466  /** \\returns the matrix represented by the decomposition,\n  467:  * i.e., it returns the product: L L^*.\n  468   * This function is provided for debug purpose. */\n  469  template<typename MatrixType, int _UpLo>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Cholesky\\LLT_MKL.h:\n   70    static typename MatrixType::Index blocked(MatrixType& m) \\\n   71    { \\\n   72:     return mkl_llt<EIGTYPE>::potrf(m, 'L'); \\\n   73    } \\\n   74    template<typename MatrixType, typename VectorType> \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\GeneralMatrixMatrixTriangular_MKL.h:\n   86  \\\n   87     MKL_INT lda=lhsStride, ldc=resStride, n=size, k=depth; \\\n   88:    char uplo=(IsLower) ? 'L' : 'U', trans=(AStorageOrder==RowMajor) ? 'T':'N'; \\\n   89     MKLTYPE alpha_, beta_; \\\n   90  \\\n   ..\n  111  \\\n  112     MKL_INT lda=lhsStride, ldc=resStride, n=size, k=depth; \\\n  113:    char uplo=(IsLower) ? 'L' : 'U', trans=(AStorageOrder==RowMajor) ? 'C':'N'; \\\n  114     RTYPE alpha_, beta_; \\\n  115     const EIGTYPE* a_ptr; \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\SelfadjointMatrixMatrix_MKL.h:\n   55      EIGTYPE alpha) \\\n   56    { \\\n   57:     char side='L', uplo='L'; \\\n   58      MKL_INT m, n, lda, ldb, ldc; \\\n   59      const EIGTYPE *a, *b; \\\n   ..\n  106      EIGTYPE alpha) \\\n  107    { \\\n  108:     char side='L', uplo='L'; \\\n  109      MKL_INT m, n, lda, ldb, ldc; \\\n  110      const EIGTYPE *a, *b; \\\n  ...\n  182      EIGTYPE alpha) \\\n  183    { \\\n  184:     char side='R', uplo='L'; \\\n  185      MKL_INT m, n, lda, ldb, ldc; \\\n  186      const EIGTYPE *a, *b; \\\n  ...\n  232      EIGTYPE alpha) \\\n  233    { \\\n  234:     char side='R', uplo='L'; \\\n  235      MKL_INT m, n, lda, ldb, ldc; \\\n  236      const EIGTYPE *a, *b; \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\SelfadjointMatrixVector_MKL.h:\n   89    MKLTYPE alpha_, beta_; \\\n   90    const EIGTYPE *x_ptr, myone(1); \\\n   91:   char uplo=(IsRowMajor) ? (IsLower ? 'U' : 'L') : (IsLower ? 'L' : 'U'); \\\n   92    assign_scalar_eig2mkl(alpha_, alpha); \\\n   93    assign_scalar_eig2mkl(beta_, myone); \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\TriangularMatrixMatrix_MKL.h:\n  131       return; \\\n  132     } \\\n  133:    char side = 'L', transa, uplo, diag = 'N'; \\\n  134     EIGTYPE *b; \\\n  135     const EIGTYPE *a; \\\n  ...\n  156  \\\n  157  /* Set uplo */ \\\n  158:    uplo = IsLower ? 'L' : 'U'; \\\n  159:    if (LhsStorageOrder==RowMajor) uplo = (uplo == 'L') ? 'U' : 'L'; \\\n  160  /* Set a, lda */ \\\n  161     Map<const MatrixLhs, 0, OuterStride<> > lhs(_lhs,rows,depth,OuterStride<>(lhsStride)); \\\n  ...\n  270  \\\n  271  /* Set uplo */ \\\n  272:    uplo = IsLower ? 'L' : 'U'; \\\n  273:    if (RhsStorageOrder==RowMajor) uplo = (uplo == 'L') ? 'U' : 'L'; \\\n  274  /* Set a, lda */ \\\n  275     Map<const MatrixRhs, 0, OuterStride<> > rhs(_rhs,depth,cols, OuterStride<>(rhsStride)); \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\TriangularMatrixVector_MKL.h:\n  120  /* Set uplo, trans and diag*/ \\\n  121     trans = 'N'; \\\n  122:    uplo = IsLower ? 'L' : 'U'; \\\n  123     diag = IsUnitDiag ? 'U' : 'N'; \\\n  124  \\\n  ...\n  205  /* Set uplo, trans and diag*/ \\\n  206     trans = ConjLhs ? 'C' : 'T'; \\\n  207:    uplo = IsLower ? 'U' : 'L'; \\\n  208     diag = IsUnitDiag ? 'U' : 'N'; \\\n  209  \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\products\\TriangularSolverMatrix_MKL.h:\n   55    { \\\n   56     MKL_INT m = size, n = otherSize, lda, ldb; \\\n   57:    char side = 'L', uplo, diag='N', transa; \\\n   58     /* Set alpha_ */ \\\n   59     MKLTYPE alpha; \\\n   ..\n   66     transa = (TriStorageOrder==RowMajor) ? ((Conjugate) ? 'C' : 'T') : 'N'; \\\n   67  /* Set uplo */ \\\n   68:    uplo = IsLower ? 'L' : 'U'; \\\n   69:    if (TriStorageOrder==RowMajor) uplo = (uplo == 'L') ? 'U' : 'L'; \\\n   70  /* Set a, lda */ \\\n   71     typedef Matrix<EIGTYPE, Dynamic, Dynamic, TriStorageOrder> MatrixTri; \\\n   ..\n  121     transa = (TriStorageOrder==RowMajor) ? ((Conjugate) ? 'C' : 'T') : 'N'; \\\n  122  /* Set uplo */ \\\n  123:    uplo = IsLower ? 'L' : 'U'; \\\n  124:    if (TriStorageOrder==RowMajor) uplo = (uplo == 'L') ? 'U' : 'L'; \\\n  125  /* Set a, lda */ \\\n  126     typedef Matrix<EIGTYPE, Dynamic, Dynamic, TriStorageOrder> MatrixTri; \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Core\\util\\Constants.h:\n   27  \n   28  /** This value means +Infinity; it is currently used only as the p parameter to MatrixBase::lpNorm<int>().\n   29:   * The value Infinity there means the L-infinity norm.\n   30    */\n   31  const int Infinity = -1;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Eigenvalues\\GeneralizedSelfAdjointEigenSolver.h:\n  139        * The implementation uses LLT to compute the Cholesky decomposition\n  140        * \\f$ B = LL^* \\f$ and computes the classical eigendecomposition\n  141:       * of the selfadjoint matrix \\f$ L^{-1} A (L^*)^{-1} \\f$ if \\p options contains Ax_lBx\n  142:       * and of \\f$ L^{*} A L \\f$ otherwise. This solves the\n  143        * generalized eigenproblem, because any solution of the generalized\n  144        * eigenproblem \\f$ Ax = \\lambda B x \\f$ corresponds to a solution\n  145:       * \\f$ L^{-1} A (L^*)^{-1} (L^* x) = \\lambda (L^* x) \\f$ of the\n  146:       * eigenproblem for \\f$ L^{-1} A (L^*)^{-1} \\f$. Similar statements\n  147        * can be made for the two other variants.\n  148        *\n  ...\n  173    bool computeEigVecs = ((options&EigVecMask)==0) || ((options&EigVecMask)==ComputeEigenvectors);\n  174  \n  175:   // Compute the cholesky decomposition of matB = L L' = U'U\n  176    LLT<MatrixType> cholB(matB);\n  177  \n  ...\n  182    if(type==Ax_lBx)\n  183    {\n  184:     // compute C = inv(L) A inv(L')\n  185      MatrixType matC = matA.template selfadjointView<Lower>();\n  186      cholB.matrixL().template solveInPlace<OnTheLeft>(matC);\n  ...\n  195    else if(type==ABx_lx)\n  196    {\n  197:     // compute C = L' A L\n  198      MatrixType matC = matA.template selfadjointView<Lower>();\n  199      matC = matC * cholB.matrixL();\n  ...\n  208    else if(type==BAx_lx)\n  209    {\n  210:     // compute C = L' A L\n  211      MatrixType matC = matA.template selfadjointView<Lower>();\n  212      matC = matC * cholB.matrixL();\n  ...\n  215      Base::compute(matC, computeEigVecs ? ComputeEigenvectors : EigenvaluesOnly);\n  216  \n  217:     // transform back the eigen vectors: evecs = L * evecs\n  218      if(computeEigVecs)\n  219        Base::m_eivec = cholB.matrixL() * Base::m_eivec;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Eigenvalues\\SelfAdjointEigenSolver_MKL.h:\n   67    lda = matrix.outerStride(); \\\n   68    matrix_order=MKLCOLROW; \\\n   69:   char jobz, uplo='L'/*, range='A'*/; \\\n   70    jobz = computeEigenvectors ? 'V' : 'N'; \\\n   71  \\\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Geometry\\Transform.h:\n  126    * \\end{array} \\right) \\f$\n  127    *<!--\n  128:   * \\b Linear \\b Matrix L (Dim)x(Dim):\n  129    * \\f$ \\left( \\begin{array}{cc}\n  130:   * L & 0\\\\\n  131    * 0\\,...\\,0 & 1\n  132    * \\end{array} \\right) \\f$\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\IterativeLinearSolvers\\IncompleteLUT.h:\n   72    *    by the average magnitude of all the original elements in the current row.\n   73    *  2) After the elimination of the row, only the @p fill largest elements in \n   74:   *    the L part and the @p fill largest elements in the U part are kept \n   75    *    (in addition to the diagonal element ). Note that @p fill is computed from \n   76    *    the input parameter @p fillfactor which is used the ratio to control the fill_in \n   ..\n  278    if (fill_in > n) fill_in = n;\n  279  \n  280:   // number of largest nonzero elements to keep in the L and the U part of the current row:\n  281    Index nnzL = fill_in/2;\n  282    Index nnzU = nnzL;\n  ...\n  408      // 4 - partially sort and insert the elements in the m_lu matrix\n  409  \n  410:     // sort the L-part of the row\n  411      sizel = len;\n  412      len = (std::min)(sizel, nnzL);\n  ...\n  415      internal::QuickSplit(ul, jul, len);\n  416  \n  417:     // store the largest m_fill elements of the L part\n  418      m_lu.startVec(ii);\n  419      for(Index k = 0; k < len; k++)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\LU\\FullPivLU.h:\n   22    *\n   23    * This class represents a LU decomposition of any matrix, with complete pivoting: the matrix A is\n   24:   * decomposed as \\f$ A = P^{-1} L U Q^{-1} \\f$ where L is unit-lower-triangular, U is\n   25    * upper-triangular, and P and Q are permutation matrices. This is a rank-revealing LU\n   26    * decomposition. The eigenvalues (diagonal coefficients) of U are sorted in such a way that any\n   ..\n   97  \n   98      /** \\returns the LU decomposition matrix: the upper-triangular part is U, the\n   99:       * unit-lower-triangular part is L (at least for square matrices; in the non-square\n  100        * case, special care is needed, see the documentation of class FullPivLU).\n  101        *\n  ...\n  521  \n  522  /** \\returns the matrix represented by the decomposition,\n  523:  * i.e., it returns the product: \\f$ P^{-1} L U Q^{-1} \\f$.\n  524   * This function is provided for debug purposes. */\n  525  template<typename MatrixType>\n  ...\n  577        * then Ker A = Q(Ker U).\n  578        *\n  579:       * Proof: trivial: just keep in mind that P, Q, L are invertible.\n  580        */\n  581  \n  ...\n  680    template<typename Dest> void evalTo(Dest& dst) const\n  681    {\n  682:     /* The decomposition PAQ = LU can be rewritten as A = P^{-1} L U Q^{-1}.\n  683       * So we proceed as follows:\n  684       * Step 1: compute c = P * rhs.\n  685:      * Step 2: replace c by the solution x to Lx = c. Exists because L is invertible.\n  686       * Step 3: replace c by the solution x to Ux = c. May or may not exist.\n  687       * Step 4: result = Q * c;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\LU\\PartialPivLU.h:\n   23    *\n   24    * This class represents a LU decomposition of a \\b square \\b invertible matrix, with partial pivoting: the matrix A\n   25:   * is decomposed as A = PLU where L is unit-lower-triangular, U is upper-triangular, and P\n   26    * is a permutation matrix.\n   27    *\n   ..\n   93  \n   94      /** \\returns the LU decomposition matrix: the upper-triangular part is U, the\n   95:       * unit-lower-triangular part is L (at least for square matrices; in the non-square\n   96        * case, special care is needed, see the documentation of class FullPivLU).\n   97        *\n   ..\n  423  \n  424  /** \\returns the matrix represented by the decomposition,\n  425:  * i.e., it returns the product: P^{-1} L U.\n  426   * This function is provided for debug purpose. */\n  427  template<typename MatrixType>\n  ...\n  451    template<typename Dest> void evalTo(Dest& dst) const\n  452    {\n  453:     /* The decomposition PA = LU can be rewritten as A = P^{-1} L U.\n  454      * So we proceed as follows:\n  455      * Step 1: compute c = Pb.\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\PaStiXSupport\\PaStiXSupport.h:\n  567      }\n  568  \n  569:     /** Compute the L factor of the LL^T supernodal factorization of \\p matrix \n  570        * \\sa analyzePattern() factorize()\n  571        */\n  ...\n  648      }\n  649  \n  650:     /** Compute the L and D factors of the LDL^T factorization of \\p matrix \n  651        * \\sa analyzePattern() factorize()\n  652        */\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseCholesky\\SimplicialCholesky.h:\n  140      {\n  141        int total = 0;\n  142:       s << \"  L:        \" << ((total+=(m_matrix.cols()+1) * sizeof(int) + m_matrix.nonZeros()*(sizeof(int)+sizeof(Scalar))) >> 20) << \"Mb\" << \"\\n\";\n  143        s << \"  diag:     \" << ((total+=m_diag.size() * sizeof(Scalar)) >> 20) << \"Mb\" << \"\\n\";\n  144        s << \"  tree:     \" << ((total+=m_parent.size() * sizeof(int)) >> 20) << \"Mb\" << \"\\n\";\n  ...\n  164          dest = b;\n  165  \n  166:       if(m_matrix.nonZeros()>0) // otherwise L==I\n  167          derived().matrixL().solveInPlace(dest);\n  168  \n  ...\n  325          : Base(matrix) {}\n  326  \n  327:     /** \\returns an expression of the factor L */\n  328      inline const MatrixL matrixL() const {\n  329          eigen_assert(Base::m_factorizationIsOk && \"Simplicial LLT not factorized\");\n  ...\n  331      }\n  332  \n  333:     /** \\returns an expression of the factor U (= L^*) */\n  334      inline const MatrixU matrixU() const {\n  335          eigen_assert(Base::m_factorizationIsOk && \"Simplicial LLT not factorized\");\n  ...\n  420          return Base::m_diag;\n  421      }\n  422:     /** \\returns an expression of the factor L */\n  423      inline const MatrixL matrixL() const {\n  424          eigen_assert(Base::m_factorizationIsOk && \"Simplicial LDLT not factorized\");\n  ...\n  426      }\n  427  \n  428:     /** \\returns an expression of the factor U (= L^*) */\n  429      inline const MatrixU matrixU() const {\n  430          eigen_assert(Base::m_factorizationIsOk && \"Simplicial LDLT not factorized\");\n  ...\n  574          dest = b;\n  575  \n  576:       if(Base::m_matrix.nonZeros()>0) // otherwise L==I\n  577        {\n  578          if(m_LDLT)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseCholesky\\SimplicialCholesky_impl.h:\n   60    for(Index k = 0; k < size; ++k)\n   61    {\n   62:     /* L(k,:) pattern: all nodes reachable in etree from nz in A(0:k-1,k) */\n   63      m_parent[k] = -1;             /* parent of k is not yet known */\n   64      tags[k] = k;                  /* mark node k as visited */\n   65:     m_nonZerosPerCol[k] = 0;      /* count of nonzeros in column k of L */\n   66      for(typename CholMatrixType::InnerIterator it(ap,k); it; ++it)\n   67      {\n   ..\n   75            if (m_parent[i] == -1)\n   76              m_parent[i] = k;\n   77:           m_nonZerosPerCol[i]++;        /* L (k,i) is nonzero */\n   78            tags[i] = k;                  /* mark i as visited */\n   79          }\n   ..\n  122    for(Index k = 0; k < size; ++k)\n  123    {\n  124:     // compute nonzero pattern of kth row of L, in topological order\n  125      y[k] = 0.0;                     // Y(0:k) is now all zero\n  126      Index top = size;               // stack for pattern is empty\n  127      tags[k] = k;                    // mark node k as visited\n  128:     m_nonZerosPerCol[k] = 0;        // count of nonzeros in column k of L\n  129      for(typename MatrixType::InnerIterator it(ap,k); it; ++it)\n  130      {\n  ...\n  136          for(len = 0; tags[i] != k; i = m_parent[i])\n  137          {\n  138:           pattern[len++] = i;     /* L(k,i) is nonzero */\n  139            tags[i] = k;            /* mark i as visited */\n  140          }\n  ...\n  144      }\n  145  \n  146:     /* compute numerical values kth row of L (a sparse triangular solve) */\n  147  \n  148      RealScalar d = numext::real(y[k]) * m_shiftScale + m_shiftOffset;    // get D(k,k), apply the shift function, and clear Y(k)\n  ...\n  150      for(; top < size; ++top)\n  151      {\n  152:       Index i = pattern[top];       /* pattern[top:n-1] is pattern of L(:,k) */\n  153        Scalar yi = y[i];             /* get and clear Y(i) */\n  154        y[i] = 0.0;\n  155  \n  156:       /* the nonzero entry L(k,i) */\n  157        Scalar l_ki;\n  158        if(DoLDLT)\n  ...\n  166          y[Li[p]] -= numext::conj(Lx[p]) * yi;\n  167        d -= numext::real(l_ki * numext::conj(yi));\n  168:       Li[p] = k;                          /* store L(k,i) in column form of L */\n  169        Lx[p] = l_ki;\n  170        ++m_nonZerosPerCol[i];              /* increment count of nonzeros in col i */\n  ...\n  182      {\n  183        Index p = Lp[k] + m_nonZerosPerCol[k]++;\n  184:       Li[p] = k ;                /* store L(k,k) = sqrt (d) in column k */\n  185        if(d <= RealScalar(0)) {\n  186          ok = false;              /* failure, matrix is not positive definite */\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU.h:\n  126      }\n  127      \n  128:     /** \\returns an expression of the matrix L, internally stored as supernodes\n  129        * The only operation available with this expression is the triangular solve\n  130        * \\code\n  ...\n  148  \n  149      /**\n  150:       * \\returns a reference to the row matrix permutation \\f$ P_r \\f$ such that \\f$P_r A P_c^T = L U\\f$\n  151        * \\sa colsPermutation()\n  152        */\n  ...\n  156      }\n  157      /**\n  158:       * \\returns a reference to the column matrix permutation\\f$ P_c^T \\f$ such that \\f$P_r A P_c^T = L U\\f$\n  159        * \\sa rowsPermutation()\n  160        */\n  ...\n  235          X.col(j) = rowsPermutation() * B.const_cast_derived().col(j);\n  236        \n  237:       //Forward substitution with L\n  238        this->matrixL().solveInPlace(X);\n  239        this->matrixU().solveInPlace(X);\n  ...\n  262        Scalar det = Scalar(1.);\n  263        // Note that the diagonal blocks of U are stored in supernodes,\n  264:       // which are available in the  L part :)\n  265        for (Index j = 0; j < this->cols(); ++j)\n  266        {\n  ...\n  316        Index det = 1;\n  317        // Note that the diagonal blocks of U are stored in supernodes,\n  318:       // which are available in the  L part :)\n  319        for (Index j = 0; j < this->cols(); ++j)\n  320        {\n  ...\n  344        Scalar det = Scalar(1.);\n  345        // Note that the diagonal blocks of U are stored in supernodes,\n  346:       // which are available in the  L part :)\n  347        for (Index j = 0; j < this->cols(); ++j)\n  348        {\n  ...\n  391      internal::perfvalues<Index> m_perfv; \n  392      RealScalar m_diagpivotthresh; // Specifies the threshold used for a diagonal entry to be an acceptable pivot\n  393:     Index m_nnzL, m_nnzU; // Nonzeros in L and U factors\n  394      Index m_detPermR, m_detPermC; // Determinants of the permutation matrices\n  395    private:\n  ...\n  654        }\n  655        \n  656:       // Form the L-segment \n  657        info = Base::pivotL(jj, m_diagpivotthresh, m_perm_r.indices(), iperm_c.indices(), pivrow, m_glu);\n  658        if ( info ) \n  ...\n  689    // Count the number of nonzeros in factors \n  690    Base::countnz(n, m_nnzL, m_nnzU, m_glu); \n  691:   // Apply permutation  to the L subscripts \n  692    Base::fixupL(n, m_perm_r.indices(), m_glu);\n  693    \n  694:   // Create supernode matrix L \n  695    m_Lstore.setInfos(m, n, m_glu.lusup, m_glu.xlusup, m_glu.lsub, m_glu.xlsub, m_glu.supno, m_glu.xsup); \n  696    // Create the column major upper sparse matrix  U; \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_column_bmod.h:\n  109    } // end for each segment\n  110    \n  111:   // Process the supernodal portion of  L\\U[*,j]\n  112    nextlu = glu.xlusup(jcol); \n  113    fsupc = glu.xsup(jsupno);\n  114    \n  115:   // copy the SPA dense into L\\U[*,j]\n  116    Index mem; \n  117    new_next = nextlu + glu.xlsub(fsupc + 1) - glu.xlsub(fsupc); \n  ...\n  138      nextlu += offset;\n  139    }\n  140:   glu.xlusup(jcol + 1) = nextlu;  // close L\\U(*,jcol); \n  141    \n  142    /* For more updates within the panel (also within the current supernode),\n  ...\n  160      nrow = nsupr - d_fsupc - nsupc; \n  161      \n  162:     // points to the beginning of jcol in snode L\\U(jsupno) \n  163      ufirst = glu.xlusup(jcol) + d_fsupc; \n  164      Index lda = glu.xlusup(jcol+1) - glu.xlusup(jcol);\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_copy_to_ucol.h:\n   85          {\n   86            irow = glu.lsub(isub); \n   87:           glu.usub(nextu) = perm_r(irow); // Unlike the L part, the U part is stored in its final order\n   88            glu.ucol(nextu) = dense(irow); \n   89            dense(irow) = Scalar(0.0); \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_Memory.h:\n  155    num_expansions = 0;\n  156    glu.nzumax = glu.nzlumax = (std::min)(fillratio * (annz+1) / n, m) * n; // estimated number of nonzeros in U \n  157:   glu.nzlmax = (std::max)(Index(4), fillratio) * (annz+1) / 4; // estimated  nnz in L factor\n  158    // Return the estimated size to the user if necessary\n  159    Index tempSpace;\n  ...\n  169    // Setup the required space \n  170    \n  171:   // First allocate Integer pointers for L\\U factors\n  172    glu.xsup.resize(n+1);\n  173    glu.supno.resize(n+1);\n  ...\n  176    glu.xusub.resize(n+1);\n  177  \n  178:   // Reserve memory for L/U factors\n  179    do \n  180    {\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_panel_bmod.h:\n  147        Index ldl = internal::first_multiple<Index>(nrow, PacketSize);\n  148        Index offset = (PacketSize-internal::first_aligned(B.data(), PacketSize)) % PacketSize;\n  149:       MappedMatrixBlock L(tempv.data()+w*ldu+offset, nrow, u_cols, OuterStride<>(ldl));\n  150        \n  151:       L.setZero();\n  152:       internal::sparselu_gemm<Scalar>(L.rows(), L.cols(), B.cols(), B.data(), B.outerStride(), U.data(), U.outerStride(), L.data(), L.outerStride());\n  153        \n  154:       // scatter U and L\n  155        u_col = 0;\n  156        for (jj = jcol; jj < jcol + w; jj++)\n  ...\n  180          {\n  181            Index irow = glu.lsub(isub++); \n  182:           dense_col(irow) -= L.coeff(i,u_col);\n  183:           L.coeffRef(i,u_col) = 0;\n  184          }\n  185          u_col++;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_panel_dfs.h:\n   74    Index kperm = perm_r(krow); \n   75    if (kperm == emptyIdxLU ) {\n   76:     // krow is in L : place it in structure of L(*, jj)\n   77      panel_lsub(nextl_col++) = krow;  // krow is indexed into A\n   78      \n   ..\n  120              if (chperm == emptyIdxLU) \n  121              {\n  122:               // case kchild is in L: place it in L(*, j)\n  123                panel_lsub(nextl_col++) = kchild;\n  124                traits.mem_expand(panel_lsub, nextl_col, chmark);\n  ...\n  141                  xplore(krep) = xdfs; \n  142                  oldrep = krep; \n  143:                 krep = chrep; // Go deeper down G(L)\n  144                  parent(krep) = oldrep; \n  145                  repfnz_col(krep) = chperm; \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_pivotL.h:\n   35    \n   36  /**\n   37:  * \\brief Performs the numerical pivotin on the current column of L, and the CDIV operation.\n   38   * \n   39   * Pivot policy :\n   ..\n   48   *   Note: If you absolutely want to use a given pivot order, then set u=0.0.\n   49   * \n   50:  * \\param jcol The current column of L\n   51   * \\param diagpivotthresh diagonal pivoting threshold\n   52   * \\param[in,out] perm_r Row permutation (threshold pivoting)\n   ..\n  118      std::swap( lsub_ptr[pivptr], lsub_ptr[nsupc] );\n  119      // Interchange numerical values as well, for the two rows in the whole snode\n  120:     // such that L is indexed the same way as A\n  121      for (icol = 0; icol <= nsupc; icol++)\n  122      {\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_pruneL.h:\n   35  \n   36  /**\n   37:  * \\brief Prunes the L-structure.\n   38   *\n   39:  * It prunes the L-structure  of supernodes whose L-structure contains the current pivot row \"pivrow\"\n   40   * \n   41   * \n   42:  * \\param jcol The current column of L\n   43   * \\param[in] perm_r Row permutation\n   44   * \\param[out] pivrow  The pivot row\n   ..\n   72      if (glu.supno(irep) == glu.supno(irep1) ) continue; // don't prune \n   73      \n   74:     // If it has not been pruned & it has a nonz in row L(pivrow,i)\n   75      if (glu.supno(irep) != jsupno )\n   76      {\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_Structs.h:\n   79    IndexVector xsup; //First supernode column ... xsup(s) points to the beginning of the s-th supernode\n   80    IndexVector supno; // Supernode number corresponding to this column (column to supernode mapping)\n   81:   ScalarVector  lusup; // nonzero values of L ordered by columns \n   82:   IndexVector lsub; // Compressed row indices of L rectangular supernodes. \n   83    IndexVector xlusup; // pointers to the beginning of each column in lusup\n   84    IndexVector xlsub; // pointers to the beginning of each column in lsub\n   ..\n  103    Index rowblk; // The minimum row dimension for 2-D blocking to be used;\n  104    Index colblk; // The minimum column dimension for 2-D blocking to be used;\n  105:   Index fillfactor; // The estimated fills factors for L and U, compared with A\n  106  }; \n  107  \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_SupernodalMatrix.h:\n   16  \n   17  /** \\ingroup SparseLU_Module\n   18:  * \\brief a class to manipulate the L supernodal factor from the SparseLU factorization\n   19   * \n   20   * This class  contain the data to easily store \n   ..\n  176  \n  177  /**\n  178:   * \\brief InnerIterator class to iterate over nonzero values of the current column in the supernodal matrix L\n  179    * \n  180    */\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_Utils.h:\n   43  \n   44  /**\n   45:  * \\brief Fix up the data storage lsub for L-subscripts. \n   46   * \n   47   * It removes the subscripts sets for structural pruning, \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SuperLUSupport\\SuperLUSupport.h:\n   24      inline float SuperLU_gssvx(superlu_options_t *options, SuperMatrix *A,                                \\\n   25           int *perm_c, int *perm_r, int *etree, char *equed,                                               \\\n   26:          FLOATTYPE *R, FLOATTYPE *C, SuperMatrix *L,                                                      \\\n   27           SuperMatrix *U, void *work, int lwork,                                                           \\\n   28           SuperMatrix *B, SuperMatrix *X,                                                                  \\\n   ..\n   31           SuperLUStat_t *stats, int *info, KEYTYPE) {                                                      \\\n   32      PREFIX##mem_usage_t mem_usage;                                                                        \\\n   33:     PREFIX##gssvx(options, A, perm_c, perm_r, etree, equed, R, C, L,                                      \\\n   34           U, work, lwork, B, X, recip_pivot_growth, rcond,                                                 \\\n   35           ferr, berr, &mem_usage, stats, info);                                                            \\\n   ..\n   58      inline float SuperLU_gsisx(superlu_options_t *options, SuperMatrix *A,                      \\\n   59           int *perm_c, int *perm_r, int *etree, char *equed,                                     \\\n   60:          FLOATTYPE *R, FLOATTYPE *C, SuperMatrix *L,                                            \\\n   61           SuperMatrix *U, void *work, int lwork,                                                 \\\n   62           SuperMatrix *B, SuperMatrix *X,                                                        \\\n   ..\n   65           SuperLUStat_t *stats, int *info, KEYTYPE) {                                            \\\n   66      PREFIX##mem_usage_t mem_usage;                                                              \\\n   67:     PREFIX##gsisx(options, A, perm_c, perm_r, etree, equed, R, C, L,                            \\\n   68           U, work, lwork, B, X, recip_pivot_growth, rcond,                                       \\\n   69           &mem_usage, stats, info);                                                              \\\n   ..\n  748          Ucol[j+1] = lastu;\n  749  \n  750:         /* Extract L */\n  751          Lval[lastl] = 1.0; /* unit diagonal */\n  752          Lrow[lastl++] = L_SUB(istart + upper - 1);\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\UmfPackSupport\\UmfPackSupport.h:\n   13  namespace Eigen { \n   14  \n   15: /* TODO extract L, extract U, compute det, etc... */\n   16  \n   17  // generic double/complex<double> wrapper functions:\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\lesson\\ukf-7.17augmentation.cpp:\n   78  \n   79    //create square root matrix\n   80:   MatrixXd L = P_aug.llt().matrixL();  // 5 * 5\n   81  \n   82    //create augmented sigma points\n   ..\n   84    for (int i = 0; i< n_aug; i++)\n   85    {\n   86:     Xsig_aug.col(i+1)       = x_aug + sqrt(lambda+n_aug) * L.col(i);\n   87:     Xsig_aug.col(i+1+n_aug) = x_aug - sqrt(lambda+n_aug) * L.col(i);\n   88    }\n   89    \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\main.cpp:\n   53  \n   54          /*\n   55: main(): s=[\"telemetry\",{\"lidar_measurement\":\"L\\t0.2611\\t-0.9724\\t1477010443000000\\t0.1800\\t-0.8300\\t5.0000\\t0.0000\",\"radar_measurement\":\"R\\t0.1401\\t-1.3702\\t6.0960\\t1477010443000000\\t0.1800\\t-0.8300\\t5.0000\\t0.0000\",\"hunter_x\":\"-10.0000\",\"hunter_y\":\"0.0000\",\"hunter_heading\":\"0.0000\"}]\n   56          */\n   57        \tstd::cout << \"main(): s=\" << s << std::endl;\n   ..\n   83      \t    //iss_lidar >> sensor_type;\n   84  \n   85:     \t    if (sensor_type.compare(\"L\") == 0) {\n   86                  std::cout << \" got Lidar measurement ! \" << std::endl;\n   87        \t    \t\tmeas_package.sensor_type_ = MeasurementPackage::LASER;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\ukf.cpp:\n  401      //create square root matrix\n  402      cout << \"7.16:  P_aug_ = \" << P_aug_  << endl;\n  403:     MatrixXd L = P_aug_.llt().matrixL();  // 5 * 5\n  404:     cout << \"7.16:  L = \" << L  << endl;\n  405  \n  406      lambda_ = 3 - n_aug_; \n  ...\n  410      Xsig_aug_.col(0)  = x_aug_;\n  411      for (int i = 0; i< n_aug_; i++) {\n  412:       Xsig_aug_.col(i+1)       = x_aug_ + sqrt(lambda_ + n_aug_) * L.col(i);\n  413:       Xsig_aug_.col(i+1+n_aug_) = x_aug_ - sqrt(lambda_ + n_aug_) * L.col(i);\n  414      }\n  415  \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\UKF.docx:\n    <binary>\n\n3484 matches across 47 files\n\n\nSearching 349 files for \" L \" (case sensitive, whole word)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Cholesky\\LDLT.h:\n   37    * is lower triangular with a unit diagonal and D is a diagonal matrix.\n   38    *\n   39:   * The decomposition uses pivoting to ensure stability, so that L will have\n   40    * zeros in the bottom right rank(A) - n submatrix. Avoiding the square root\n   41    * on D also stabilizes the computation.\n   ..\n  173        * \\note_about_checking_solutions\n  174        *\n  175:       * More precisely, this method solves \\f$ A x = b \\f$ using the decomposition \\f$ A = P^T L D L^* P \\f$\n  176        * by solving the systems \\f$ P^T y_1 = b \\f$, \\f$ L y_2 = y_1 \\f$, \\f$ D y_3 = y_2 \\f$, \n  177        * \\f$ L^* y_4 = y_3 \\f$ and \\f$ P x = y_4 \\f$ in succession. If the matrix \\f$ A \\f$ is singular, then\n  ...\n  563  \n  564  /** \\returns the matrix represented by the decomposition,\n  565:  * i.e., it returns the product: P^T L D L^* P.\n  566   * This function is provided for debug purpose. */\n  567  template<typename MatrixType, int _UpLo>\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\Cholesky\\LLT.h:\n   28    *\n   29    * This class performs a LL^T Cholesky decomposition of a symmetric, positive definite\n   30:   * matrix A such that A = LL^* = U^*U, where L is lower triangular.\n   31    *\n   32    * While the Cholesky decomposition is particularly useful to solve selfadjoint problems like  D^*D x = b,\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\IterativeLinearSolvers\\IncompleteLUT.h:\n   72    *    by the average magnitude of all the original elements in the current row.\n   73    *  2) After the elimination of the row, only the @p fill largest elements in \n   74:   *    the L part and the @p fill largest elements in the U part are kept \n   75    *    (in addition to the diagonal element ). Note that @p fill is computed from \n   76    *    the input parameter @p fillfactor which is used the ratio to control the fill_in \n   ..\n  278    if (fill_in > n) fill_in = n;\n  279  \n  280:   // number of largest nonzero elements to keep in the L and the U part of the current row:\n  281    Index nnzL = fill_in/2;\n  282    Index nnzU = nnzL;\n  ...\n  415      internal::QuickSplit(ul, jul, len);\n  416  \n  417:     // store the largest m_fill elements of the L part\n  418      m_lu.startVec(ii);\n  419      for(Index k = 0; k < len; k++)\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\LU\\FullPivLU.h:\n   22    *\n   23    * This class represents a LU decomposition of any matrix, with complete pivoting: the matrix A is\n   24:   * decomposed as \\f$ A = P^{-1} L U Q^{-1} \\f$ where L is unit-lower-triangular, U is\n   25    * upper-triangular, and P and Q are permutation matrices. This is a rank-revealing LU\n   26    * decomposition. The eigenvalues (diagonal coefficients) of U are sorted in such a way that any\n   ..\n  683       * So we proceed as follows:\n  684       * Step 1: compute c = P * rhs.\n  685:      * Step 2: replace c by the solution x to Lx = c. Exists because L is invertible.\n  686       * Step 3: replace c by the solution x to Ux = c. May or may not exist.\n  687       * Step 4: result = Q * c;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\LU\\PartialPivLU.h:\n   23    *\n   24    * This class represents a LU decomposition of a \\b square \\b invertible matrix, with partial pivoting: the matrix A\n   25:   * is decomposed as A = PLU where L is unit-lower-triangular, U is upper-triangular, and P\n   26    * is a permutation matrix.\n   27    *\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\PaStiXSupport\\PaStiXSupport.h:\n  567      }\n  568  \n  569:     /** Compute the L factor of the LL^T supernodal factorization of \\p matrix \n  570        * \\sa analyzePattern() factorize()\n  571        */\n  ...\n  648      }\n  649  \n  650:     /** Compute the L and D factors of the LDL^T factorization of \\p matrix \n  651        * \\sa analyzePattern() factorize()\n  652        */\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU.h:\n  391      internal::perfvalues<Index> m_perfv; \n  392      RealScalar m_diagpivotthresh; // Specifies the threshold used for a diagonal entry to be an acceptable pivot\n  393:     Index m_nnzL, m_nnzU; // Nonzeros in L and U factors\n  394      Index m_detPermR, m_detPermC; // Determinants of the permutation matrices\n  395    private:\n  ...\n  689    // Count the number of nonzeros in factors \n  690    Base::countnz(n, m_nnzL, m_nnzU, m_glu); \n  691:   // Apply permutation  to the L subscripts \n  692    Base::fixupL(n, m_perm_r.indices(), m_glu);\n  693    \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_copy_to_ucol.h:\n   85          {\n   86            irow = glu.lsub(isub); \n   87:           glu.usub(nextu) = perm_r(irow); // Unlike the L part, the U part is stored in its final order\n   88            glu.ucol(nextu) = dense(irow); \n   89            dense(irow) = Scalar(0.0); \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_Memory.h:\n  155    num_expansions = 0;\n  156    glu.nzumax = glu.nzlumax = (std::min)(fillratio * (annz+1) / n, m) * n; // estimated number of nonzeros in U \n  157:   glu.nzlmax = (std::max)(Index(4), fillratio) * (annz+1) / 4; // estimated  nnz in L factor\n  158    // Return the estimated size to the user if necessary\n  159    Index tempSpace;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_pivotL.h:\n  118      std::swap( lsub_ptr[pivptr], lsub_ptr[nsupc] );\n  119      // Interchange numerical values as well, for the two rows in the whole snode\n  120:     // such that L is indexed the same way as A\n  121      for (icol = 0; icol <= nsupc; icol++)\n  122      {\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_Structs.h:\n   79    IndexVector xsup; //First supernode column ... xsup(s) points to the beginning of the s-th supernode\n   80    IndexVector supno; // Supernode number corresponding to this column (column to supernode mapping)\n   81:   ScalarVector  lusup; // nonzero values of L ordered by columns \n   82:   IndexVector lsub; // Compressed row indices of L rectangular supernodes. \n   83    IndexVector xlusup; // pointers to the beginning of each column in lusup\n   84    IndexVector xlsub; // pointers to the beginning of each column in lsub\n   ..\n  103    Index rowblk; // The minimum row dimension for 2-D blocking to be used;\n  104    Index colblk; // The minimum column dimension for 2-D blocking to be used;\n  105:   Index fillfactor; // The estimated fills factors for L and U, compared with A\n  106  }; \n  107  \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\Eigen\\src\\SparseLU\\SparseLU_SupernodalMatrix.h:\n   16  \n   17  /** \\ingroup SparseLU_Module\n   18:  * \\brief a class to manipulate the L supernodal factor from the SparseLU factorization\n   19   * \n   20   * This class  contain the data to easily store \n\n21 matches across 12 files\n",
			"settings":
			{
				"buffer_size": 54523,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "install-ubuntu.sh",
			"settings":
			{
				"buffer_size": 326,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 283.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"line end",
				"Line Ending to all views: Unix"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add ",
				"Git: Add Remote"
			],
			[
				"git add",
				"Git: Add Remote"
			],
			[
				"git pull",
				"Git: Pull"
			]
		],
		"width": 735.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src"
	],
	"file_history":
	[
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/SublimeAStyleFormatter.sublime-settings",
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/LineEndings.sublime-settings",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/ukf.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/json.hpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.23mean-covariance-predict.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.23mean-covariance-predict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.20sigmapointpredict.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/ukf.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/tools.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/tools.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/measurement_package.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/main.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.14sigmaGeneration.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.17augmentation.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.23mean-covariance-predict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.26Update-predictRadarMeas.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.29Update-stateof-mean-covariance.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.14sigmaGeneration.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.14sigmaGeneration.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.17augmentation.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.17augmentation.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.26Update-predictRadarMeas.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.26Update-predictRadarMeas.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.29Update-stateof-mean-covariance.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.29Update-stateof-mean-covariance.cpp",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/tools/proxyCntlm/GetCurrentPasswordHash.bat",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/env/rv_windows_setup.py",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_start.bat",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_windows.ini",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_windows.ini.template",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/tools/proxyCntlm/cntlm/cntlm.ini",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/UKF.docx",
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/Users/uids6815/Crackcode/tensorflow/models/tutorials/image/mnist/data/t10k-images-idx3-ubyte.gz",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/Eigen/src/Cholesky/LLT.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.29.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.20sigmapointpredict.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.17augmentation.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.17augmentation.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.17augmentation.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.14.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.14.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.14.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/tracking5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/KalmanFilter.py",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/measurement_package.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/tracking5-12.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/main5-12.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/kalman5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/CalculateRMSE5-22.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/JacobianMatrix5-18.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/kalman5-12.cpp",
		"/C/Users/uids6815/Downloads/cntlm - Kopie/Cntlm/cntlm.ini",
		"/C/Users/uids6815/Downloads/cntlm - Kopie/cntlm.bat",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/EKF_DATA/obj_pose-laser-radar-synthetic-input.txt",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/measurement_package5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/FusionEKF.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/Eigen/src/Core/Matrix.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/README.md",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/logs/train_results/result.md",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/logs/hogviz_experiments/ppc_exp1.md",
		"/C/Users/uids6815/Crackcode/tensorflow/test1"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 133.0,
		"where_history":
		[
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\Conti\\Redvine",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\mnist\\",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\mnist",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\cifar10",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter\\src\\",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter\\src\\Eigen",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\kalman-master",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-ND-Term1-master\\ComputerVision\\P5-VehicleDetection"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"time_us_",
			"R_radar_",
			"previous",
			"Xsig_aug_",
			"P_",
			"X_aug_",
			"x_aug_",
			"Xsig_pred_",
			"Xsig_aug_",
			" L ",
			"L",
			"std_yawdd_",
			"std_a_",
			"L",
			"Xsig_",
			"object_detection",
			"object",
			"keras",
			"kefas",
			"train",
			"training_data_from",
			"training_from",
			"training_data_from_mongo",
			"flow_from_mongodb",
			"ACTIONS",
			"Xsig_pred_",
			"Xsig_pred",
			"Xsig_aug_",
			"Xsig_",
			"std_a_",
			"std_a",
			"n_x",
			"n_x_",
			"print",
			"WORK_DIRECTORY",
			"maybe_download",
			"store_true",
			"self_test",
			"mnist",
			"embedding_config",
			"tmp",
			"mnist_logs",
			"mnist_log",
			"num_epochs",
			"step",
			"i",
			"cpu:0",
			"gpu:0",
			"/gpu:0",
			"cpu",
			"/tmp/cifar10_train",
			"tmp/cifar10_train",
			"_variable_on_cpu",
			"cpu:0",
			"cpu",
			"train",
			"inference",
			"tf.nn.conv2d",
			"_variable_on_cpu",
			"DATA_URL",
			"preprocess",
			"preprocess_input_data",
			"eval_dir",
			"tf.Session",
			"cpu",
			"gpu",
			"FLAGS",
			"sess",
			"main",
			"tf.summary",
			"with tf.Session",
			"tf.summary",
			"tf.get_variable",
			"summary_dir",
			"summaries_dir",
			"SummaryWriter",
			"GraphDef",
			"logdir",
			"tf.summary.scalar",
			"NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN",
			"FLAGS",
			"TODO",
			"z_pred",
			"dt",
			"TODO",
			"raw_measurements_",
			"VectorXd",
			"measurement_timestamp",
			"noise_ax_",
			"recording",
			"extract_features_plot",
			"0.90",
			"0.91",
			"scale",
			"0.995",
			"0.996",
			"0.997",
			"0.998",
			"0.999",
			"0.996",
			"0.99",
			"single_img",
			"slide_window_polygonmask",
			"0.968",
			"0.969",
			"0.97",
			"color_hist",
			"hog_cha",
			"extract_features",
			"extract_features_plot",
			"urlopen"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"x_aug_",
			"X_aug_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/uids6815/Crackcode/Sublime/Data/Packages/LineEndings/LineEndings.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 242,
						"regions":
						{
						},
						"selection":
						[
							[
								91,
								91
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										240,
										241
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7187,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/measurement_package.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 276,
						"regions":
						{
						},
						"selection":
						[
							[
								276,
								276
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/tools.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 432,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										411,
										417
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/tools.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1098,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										748,
										749
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										630,
										631
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/ukf.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25067,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										9462,
										9462
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								2800,
								2800
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										3168,
										3169
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 206.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ukf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3345,
						"regions":
						{
						},
						"selection":
						[
							[
								2486,
								2332
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3322,
										3323
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										198,
										199
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1612.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 752,
						"regions":
						{
						},
						"selection":
						[
							[
								752,
								752
							]
						],
						"settings":
						{
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54523,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										1882,
										1883
									],
									[
										1916,
										1917
									],
									[
										1976,
										1977
									],
									[
										2026,
										2027
									],
									[
										2050,
										2051
									],
									[
										2064,
										2065
									],
									[
										2092,
										2093
									],
									[
										2110,
										2111
									],
									[
										3694,
										3695
									],
									[
										3728,
										3729
									],
									[
										3788,
										3789
									],
									[
										3838,
										3839
									],
									[
										3862,
										3863
									],
									[
										3876,
										3877
									],
									[
										3904,
										3905
									],
									[
										3922,
										3923
									],
									[
										4497,
										4498
									],
									[
										4590,
										4591
									],
									[
										4735,
										4736
									],
									[
										4860,
										4861
									],
									[
										4933,
										4934
									],
									[
										4986,
										4987
									],
									[
										5067,
										5068
									],
									[
										5128,
										5129
									],
									[
										6457,
										6458
									],
									[
										6491,
										6492
									],
									[
										6551,
										6552
									],
									[
										6601,
										6602
									],
									[
										6625,
										6626
									],
									[
										6639,
										6640
									],
									[
										6667,
										6668
									],
									[
										6685,
										6686
									],
									[
										8249,
										8250
									],
									[
										8283,
										8284
									],
									[
										8343,
										8344
									],
									[
										8393,
										8394
									],
									[
										8417,
										8418
									],
									[
										8431,
										8432
									],
									[
										8459,
										8460
									],
									[
										8477,
										8478
									],
									[
										9015,
										9016
									],
									[
										9108,
										9109
									],
									[
										9253,
										9254
									],
									[
										9378,
										9379
									],
									[
										9451,
										9452
									],
									[
										9504,
										9505
									],
									[
										9585,
										9586
									],
									[
										9646,
										9647
									],
									[
										10814,
										10815
									],
									[
										11388,
										11389
									],
									[
										11553,
										11554
									],
									[
										11788,
										11789
									],
									[
										12034,
										12035
									],
									[
										12038,
										12039
									],
									[
										12111,
										12112
									],
									[
										12169,
										12170
									],
									[
										12594,
										12595
									],
									[
										12598,
										12599
									],
									[
										12755,
										12756
									],
									[
										12936,
										12937
									],
									[
										13132,
										13133
									],
									[
										13136,
										13137
									],
									[
										13299,
										13300
									],
									[
										13303,
										13304
									],
									[
										13686,
										13687
									],
									[
										13777,
										13778
									],
									[
										13929,
										13930
									],
									[
										13940,
										13941
									],
									[
										14030,
										14031
									],
									[
										14040,
										14041
									],
									[
										14253,
										14254
									],
									[
										14257,
										14258
									],
									[
										14456,
										14457
									],
									[
										14508,
										14509
									],
									[
										14578,
										14579
									],
									[
										14921,
										14922
									],
									[
										15159,
										15160
									],
									[
										15320,
										15321
									],
									[
										15493,
										15494
									],
									[
										15665,
										15666
									],
									[
										15667,
										15668
									],
									[
										16027,
										16028
									],
									[
										16371,
										16372
									],
									[
										16585,
										16586
									],
									[
										16917,
										16918
									],
									[
										16927,
										16928
									],
									[
										17079,
										17080
									],
									[
										17089,
										17090
									],
									[
										17251,
										17252
									],
									[
										17413,
										17414
									],
									[
										17772,
										17773
									],
									[
										17790,
										17791
									],
									[
										18105,
										18106
									],
									[
										18258,
										18259
									],
									[
										18328,
										18329
									],
									[
										18341,
										18342
									],
									[
										18539,
										18540
									],
									[
										18609,
										18610
									],
									[
										18622,
										18623
									],
									[
										18992,
										18993
									],
									[
										19176,
										19177
									],
									[
										19471,
										19472
									],
									[
										19699,
										19700
									],
									[
										19769,
										19770
									],
									[
										19782,
										19783
									],
									[
										20038,
										20039
									],
									[
										20108,
										20109
									],
									[
										20121,
										20122
									],
									[
										20528,
										20529
									],
									[
										20944,
										20945
									],
									[
										20954,
										20955
									],
									[
										21024,
										21025
									],
									[
										21032,
										21033
									],
									[
										21244,
										21245
									],
									[
										21254,
										21255
									],
									[
										21265,
										21266
									],
									[
										21283,
										21284
									],
									[
										21337,
										21338
									],
									[
										21347,
										21348
									],
									[
										21627,
										21628
									],
									[
										21629,
										21630
									],
									[
										21757,
										21758
									],
									[
										21766,
										21767
									],
									[
										21980,
										21981
									],
									[
										21985,
										21986
									],
									[
										22172,
										22173
									],
									[
										22177,
										22178
									],
									[
										22448,
										22449
									],
									[
										22794,
										22795
									],
									[
										23080,
										23081
									],
									[
										23146,
										23147
									],
									[
										23549,
										23550
									],
									[
										23914,
										23915
									],
									[
										24125,
										24126
									],
									[
										24325,
										24326
									],
									[
										24680,
										24681
									],
									[
										24701,
										24702
									],
									[
										25082,
										25083
									],
									[
										25366,
										25367
									],
									[
										25597,
										25598
									],
									[
										25790,
										25791
									],
									[
										25961,
										25962
									],
									[
										26398,
										26399
									],
									[
										26650,
										26651
									],
									[
										26930,
										26931
									],
									[
										27180,
										27181
									],
									[
										27442,
										27443
									],
									[
										27620,
										27621
									],
									[
										27942,
										27943
									],
									[
										28368,
										28369
									],
									[
										28535,
										28536
									],
									[
										28765,
										28766
									],
									[
										29021,
										29022
									],
									[
										29252,
										29253
									],
									[
										29499,
										29500
									],
									[
										29755,
										29756
									],
									[
										30048,
										30049
									],
									[
										30272,
										30273
									],
									[
										30492,
										30493
									],
									[
										30806,
										30807
									],
									[
										31017,
										31018
									],
									[
										31197,
										31198
									],
									[
										31506,
										31507
									],
									[
										31651,
										31652
									],
									[
										31885,
										31886
									],
									[
										31910,
										31911
									],
									[
										32156,
										32157
									],
									[
										32514,
										32515
									],
									[
										32793,
										32794
									],
									[
										32996,
										32997
									],
									[
										33194,
										33195
									],
									[
										33453,
										33454
									],
									[
										33687,
										33688
									],
									[
										33931,
										33932
									],
									[
										34233,
										34234
									],
									[
										34412,
										34413
									],
									[
										34708,
										34709
									],
									[
										34821,
										34822
									],
									[
										35224,
										35225
									],
									[
										35351,
										35352
									],
									[
										35548,
										35549
									],
									[
										35772,
										35773
									],
									[
										36153,
										36154
									],
									[
										36664,
										36665
									],
									[
										36864,
										36865
									],
									[
										37016,
										37017
									],
									[
										37394,
										37395
									],
									[
										37485,
										37486
									],
									[
										37543,
										37544
									],
									[
										37553,
										37554
									],
									[
										37627,
										37628
									],
									[
										37637,
										37638
									],
									[
										37699,
										37700
									],
									[
										37883,
										37884
									],
									[
										37918,
										37919
									],
									[
										38217,
										38218
									],
									[
										38246,
										38247
									],
									[
										38452,
										38453
									],
									[
										38467,
										38468
									],
									[
										38748,
										38749
									],
									[
										39073,
										39074
									],
									[
										39282,
										39283
									],
									[
										39591,
										39592
									],
									[
										39861,
										39862
									],
									[
										39908,
										39909
									],
									[
										39941,
										39942
									],
									[
										40059,
										40060
									],
									[
										40309,
										40310
									],
									[
										40776,
										40777
									],
									[
										40854,
										40855
									],
									[
										41276,
										41277
									],
									[
										41547,
										41548
									],
									[
										41807,
										41808
									],
									[
										42031,
										42032
									],
									[
										42545,
										42546
									],
									[
										43142,
										43143
									],
									[
										43687,
										43688
									],
									[
										44234,
										44235
									],
									[
										44550,
										44551
									],
									[
										44859,
										44860
									],
									[
										45152,
										45153
									],
									[
										45361,
										45362
									],
									[
										45437,
										45438
									],
									[
										45648,
										45649
									],
									[
										46065,
										46066
									],
									[
										46448,
										46449
									],
									[
										46513,
										46514
									],
									[
										46522,
										46523
									],
									[
										46740,
										46741
									],
									[
										46825,
										46826
									],
									[
										47339,
										47342
									],
									[
										47654,
										47657
									],
									[
										48009,
										48012
									],
									[
										48403,
										48406
									],
									[
										48887,
										48890
									],
									[
										49252,
										49255
									],
									[
										49466,
										49469
									],
									[
										49842,
										49845
									],
									[
										50240,
										50243
									],
									[
										50677,
										50680
									],
									[
										50962,
										50965
									],
									[
										51140,
										51143
									],
									[
										51601,
										51604
									],
									[
										51868,
										51871
									],
									[
										52202,
										52205
									],
									[
										52713,
										52716
									],
									[
										53112,
										53115
									],
									[
										53604,
										53607
									],
									[
										53682,
										53685
									],
									[
										54104,
										54107
									],
									[
										54375,
										54378
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								41319,
								41319
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										39682,
										39683
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 19162.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "install-ubuntu.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 326,
						"regions":
						{
						},
						"selection":
						[
							[
								209,
								209
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-pull":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 248.0
	},
	"pinned_build_system": "",
	"project": "P2.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 299.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
