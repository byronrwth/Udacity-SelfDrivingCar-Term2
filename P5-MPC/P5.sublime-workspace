{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"n_",
				"n_x_"
			],
			[
				"S",
				"Si"
			],
			[
				"M",
				"MatrixXd"
			],
			[
				"H",
				"Ht"
			],
			[
				"u",
				"urlopen"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 6525 files for \"CppAD\"\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\Quizzes\\CarND-MPC-Quizzes\\Dockerfile:\n   14      git \\\n   15      wget \\\n   16:     cppad \\\n   17      python-matplotlib \\ \n   18      python2.7-dev\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\Quizzes\\CarND-MPC-Quizzes\\mpc_to_line\\solution\\MPC.cpp:\n    1  #include \"MPC.h\"\n    2  #include <math.h>\n    3: #include <cppad/cppad.hpp>\n    4: #include <cppad/ipopt/solve.hpp>\n    5  #include \"Eigen-3.3/Eigen/Core\"\n    6  #include \"Eigen-3.3/Eigen/QR\"\n    .\n    9  namespace plt = matplotlibcpp;\n   10  \n   11: using CppAD::AD;\n   12  \n   13  // We set the number of timesteps to 25\n   ..\n   51    FG_eval(Eigen::VectorXd coeffs) { this->coeffs = coeffs; }\n   52  \n   53:   typedef CPPAD_TESTVECTOR(AD<double>) ADvector;\n   54    // `fg` is a vector containing the cost and constraints.\n   55    // `vars` is a vector containing the variable values (state & actuators).\n   ..\n   61      // The part of the cost based on the reference state.\n   62      for (int t = 0; t < N; t++) {\n   63:       fg[0] += CppAD::pow(vars[cte_start + t], 2);\n   64:       fg[0] += CppAD::pow(vars[epsi_start + t], 2);\n   65:       fg[0] += CppAD::pow(vars[v_start + t] - ref_v, 2);\n   66      }\n   67  \n   68      // Minimize the use of actuators.\n   69      for (int t = 0; t < N - 1; t++) {\n   70:       fg[0] += CppAD::pow(vars[delta_start + t], 2);\n   71:       fg[0] += CppAD::pow(vars[a_start + t], 2);\n   72      }\n   73  \n   74      // Minimize the value gap between sequential actuations.\n   75      for (int t = 0; t < N - 2; t++) {\n   76:       fg[0] += CppAD::pow(vars[delta_start + t + 1] - vars[delta_start + t], 2);\n   77:       fg[0] += CppAD::pow(vars[a_start + t + 1] - vars[a_start + t], 2);\n   78      }\n   79  \n   ..\n  118  \n  119        AD<double> f0 = coeffs[0] + coeffs[1] * x0;\n  120:       AD<double> psides0 = CppAD::atan(coeffs[1]);\n  121  \n  122        // Here's `x` to get you started.\n  ...\n  130        // cte[t+1] = f(x[t]) - y[t] + v[t] * sin(epsi[t]) * dt\n  131        // epsi[t+1] = psi[t] - psides[t] + v[t] * delta[t] / Lf * dt\n  132:       fg[1 + x_start + t] = x1 - (x0 + v0 * CppAD::cos(psi0) * dt);\n  133:       fg[1 + y_start + t] = y1 - (y0 + v0 * CppAD::sin(psi0) * dt);\n  134        fg[1 + psi_start + t] = psi1 - (psi0 + v0 * delta0 / Lf * dt);\n  135        fg[1 + v_start + t] = v1 - (v0 + a0 * dt);\n  136        fg[1 + cte_start + t] =\n  137:           cte1 - ((f0 - y0) + (v0 * CppAD::sin(epsi0) * dt));\n  138        fg[1 + epsi_start + t] =\n  139            epsi1 - ((psi0 - psides0) + v0 * delta0 / Lf * dt);\n  ...\n  151  vector<double> MPC::Solve(Eigen::VectorXd x0, Eigen::VectorXd coeffs) {\n  152    size_t i;\n  153:   typedef CPPAD_TESTVECTOR(double) Dvector;\n  154  \n  155    double x = x0[0];\n  ...\n  239  \n  240    // place to return solution\n  241:   CppAD::ipopt::solve_result<Dvector> solution;\n  242  \n  243    // solve the problem\n  244:   CppAD::ipopt::solve<Dvector, FG_eval>(\n  245        options, vars, vars_lowerbound, vars_upperbound, constraints_lowerbound,\n  246        constraints_upperbound, fg_eval, solution);\n  ...\n  250    //\n  251    bool ok = true;\n  252:   ok &= solution.status == CppAD::ipopt::solve_result<Dvector>::success;\n  253  \n  254    auto cost = solution.obj_value;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\Quizzes\\CarND-MPC-Quizzes\\mpc_to_line\\src\\MPC.cpp:\n    1  #include \"MPC.h\"\n    2  #include <math.h>\n    3: #include <cppad/cppad.hpp>\n    4: #include <cppad/ipopt/solve.hpp>\n    5  #include \"Eigen-3.3/Eigen/Core\"\n    6  #include \"Eigen-3.3/Eigen/QR\"\n    .\n    9  namespace plt = matplotlibcpp;\n   10  \n   11: using CppAD::AD;\n   12  \n   13  // TODO: Set N and dt\n   ..\n   49    FG_eval(Eigen::VectorXd coeffs) { this->coeffs = coeffs; }\n   50  \n   51:   typedef CPPAD_TESTVECTOR(AD<double>) ADvector;\n   52    // `fg` is a vector containing the cost and constraints.\n   53    // `vars` is a vector containing the variable values (state & actuators).\n   ..\n   89        // The idea here is to constraint this value to be 0.\n   90        //\n   91:       // NOTE: The use of `AD<double>` and use of `CppAD`!\n   92:       // This is also CppAD can compute derivatives and pass\n   93        // these to the solver.\n   94  \n   95        // TODO: Setup the rest of the model constraints\n   96:       fg[1 + x_start + t] = x1 - (x0 + v0 * CppAD::cos(psi0) * dt);\n   97      }\n   98    }\n   ..\n  108  vector<double> MPC::Solve(Eigen::VectorXd x0, Eigen::VectorXd coeffs) {\n  109    size_t i;\n  110:   typedef CPPAD_TESTVECTOR(double) Dvector;\n  111  \n  112    double x = x0[0];\n  ...\n  196  \n  197    // place to return solution\n  198:   CppAD::ipopt::solve_result<Dvector> solution;\n  199  \n  200    // solve the problem\n  201:   CppAD::ipopt::solve<Dvector, FG_eval>(\n  202        options, vars, vars_lowerbound, vars_upperbound, constraints_lowerbound,\n  203        constraints_upperbound, fg_eval, solution);\n  ...\n  207    //\n  208    bool ok = true;\n  209:   ok &= solution.status == CppAD::ipopt::solve_result<Dvector>::success;\n  210  \n  211    auto cost = solution.obj_value;\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\Quizzes\\CarND-MPC-Quizzes\\README.md:\n   19  \n   20  The *Global Kinematic Quiz* and *Polynomial Fitting* quizzes have all the dependencies in repo. For the *MPC* quiz\n   21: you'll have to install Ipopt and CppAD.\n   22  \n   23  * [Ipopt](https://projects.coin-or.org/Ipopt)\n   ..\n   32      * Then call `install_ipopt.sh` with the source directory as the first argument, ex: `sudo bash install_ipopt.sh Ipopt-3.12.1`.\n   33    * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.\n   34: * [CppAD](https://www.coin-or.org/CppAD/)\n   35:   * Mac: `brew install cppad`\n   36:   * Linux `sudo apt-get install cppad` or equivalent.\n   37    * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.\n   38  \n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\README.md:\n   45      * Then call `install_ipopt.sh` with the source directory as the first argument, ex: `sudo bash install_ipopt.sh Ipopt-3.12.1`. \n   46    * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.\n   47: * [CppAD](https://www.coin-or.org/CppAD/)\n   48:   * Mac: `brew install cppad`\n   49:   * Linux `sudo apt-get install cppad` or equivalent.\n   50    * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.\n   51  * [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page). This is already part of the repo so you shouldn't have to worry about it.\n\nC:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC\\src\\MPC.cpp:\n    1  #include \"MPC.h\"\n    2: #include <cppad/cppad.hpp>\n    3: #include <cppad/ipopt/solve.hpp>\n    4  #include \"Eigen-3.3/Eigen/Core\"\n    5  \n    6: using CppAD::AD;\n    7  \n    8  // TODO: Set the timestep length and duration\n    .\n   28    FG_eval(Eigen::VectorXd coeffs) { this->coeffs = coeffs; }\n   29  \n   30:   typedef CPPAD_TESTVECTOR(AD<double>) ADvector;\n   31    void operator()(ADvector& fg, const ADvector& vars) {\n   32      // TODO: implement MPC\n   ..\n   46    bool ok = true;\n   47    size_t i;\n   48:   typedef CPPAD_TESTVECTOR(double) Dvector;\n   49  \n   50    // TODO: Set the number of model variables (includes both states and inputs).\n   ..\n   99  \n  100    // place to return solution\n  101:   CppAD::ipopt::solve_result<Dvector> solution;\n  102  \n  103    // solve the problem\n  104:   CppAD::ipopt::solve<Dvector, FG_eval>(\n  105        options, vars, vars_lowerbound, vars_upperbound, constraints_lowerbound,\n  106        constraints_upperbound, fg_eval, solution);\n  107  \n  108    // Check some of the solution values\n  109:   ok &= solution.status == CppAD::ipopt::solve_result<Dvector>::success;\n  110  \n  111    // Cost\n\n51 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 8010,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/MPC.cpp",
			"settings":
			{
				"buffer_size": 11920,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/MPC.h",
			"settings":
			{
				"buffer_size": 370,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/matplotlibcpp.h",
			"settings":
			{
				"buffer_size": 22805,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 283.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"line end",
				"Line Ending to all views: Unix"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add ",
				"Git: Add Remote"
			],
			[
				"git add",
				"Git: Add Remote"
			],
			[
				"git pull",
				"Git: Pull"
			]
		],
		"width": 735.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes/global_kinematic_model",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes/mpc_to_line",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes/mpc_to_line/solution",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes/mpc_to_line/src",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/Quizzes/CarND-MPC-Quizzes/polyfit",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P5-MPC/src"
	],
	"file_history":
	[
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P4-PID-Control/.gitignore",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P4-PID-Control/lesson/16.7_PD_Controller/PD_controller.py",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P4-PID-Control/lesson/16.11_PID_Controller/PID.py",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P4-PID-Control/lesson/16.14_twiddle/twiddle.py",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_start.sh",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Catch-Run-Away-Car-UKF/src/Eigen/src/SparseCore/SparseBlock.h",
		"/C/Users/uids6815/Crackcode/Sublime/sublime_text.exe",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/ukf.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/ukf.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/measurement_package.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/json.hpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/main.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/CarND-Catch-Run-Away-Car-UKF-master/src/Open Notebook.onetoc2",
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/SublimeAStyleFormatter.sublime-settings",
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/LineEndings.sublime-settings",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/ukf.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/json.hpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.23mean-covariance-predict.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.23mean-covariance-predict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.20sigmapointpredict.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/ukf.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/tools.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/tools.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/measurement_package.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/main.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.14sigmaGeneration.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.17augmentation.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.23mean-covariance-predict.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.26Update-predictRadarMeas.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/main-7.29Update-stateof-mean-covariance.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.14sigmaGeneration.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.14sigmaGeneration.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.17augmentation.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.17augmentation.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.26Update-predictRadarMeas.cpp",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.26Update-predictRadarMeas.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.29Update-stateof-mean-covariance.h",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/lesson/ukf-7.29Update-stateof-mean-covariance.cpp",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/tools/proxyCntlm/GetCurrentPasswordHash.bat",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/env/rv_windows_setup.py",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_start.bat",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_windows.ini",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/rv_windows.ini.template",
		"/C/Users/uids6815/Crackcode/Conti/Redvine/tools/proxyCntlm/cntlm/cntlm.ini",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/UKF.docx",
		"/C/Users/uids6815/Crackcode/Sublime/Data/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/Users/uids6815/Crackcode/tensorflow/models/tutorials/image/mnist/data/t10k-images-idx3-ubyte.gz",
		"/C/Users/uids6815/Linux/Udacity/Udacity-SelfDrivingCar-Term2/P2-Unscented-KalmanFilter/src/Eigen/src/Cholesky/LLT.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.29.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.20sigmapointpredict.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.20sigmapointpredict.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.17augmentation.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.17augmentation.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.17augmentation.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/main-7.14.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.14.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P2-UKF/ukf-7.14.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/tracking5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/KalmanFilter.py",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/measurement_package.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/tracking5-12.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/main5-12.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/kalman5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/CalculateRMSE5-22.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/JacobianMatrix5-18.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/kalman5-12.cpp",
		"/C/Users/uids6815/Downloads/cntlm - Kopie/Cntlm/cntlm.ini",
		"/C/Users/uids6815/Downloads/cntlm - Kopie/cntlm.bat",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/EKF_DATA/obj_pose-laser-radar-synthetic-input.txt",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/measurement_package5-12.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/FusionEKF.cpp",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-Term2/P1-KalmanFilter/src/Eigen/src/Core/Matrix.h",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/README.md",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/logs/train_results/result.md",
		"/C/Users/uids6815/Crackcode/udacity/Udacity-SelfDrivingCar-ND-Term1-master/ComputerVision/P5-VehicleDetection/logs/hogviz_experiments/ppc_exp1.md",
		"/C/Users/uids6815/Crackcode/tensorflow/test1"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 133.0,
		"where_history":
		[
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC",
			"C:\\Users\\uids6815\\Linux\\Udacity\\P4-PID-Control\\src",
			"C:\\Users\\uids6815\\Crackcode\\Conti\\Redvine",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\CarND-Catch-Run-Away-Car-UKF\\src\\",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\CarND-Catch-Run-Away-Car-UKF-master\\src\\",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\CarND-Catch-Run-Away-Car-UKF-master\\src\\Eigen",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\CarND-Catch-Run-Away-Car-UKF-master\\src",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src\\",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\Conti\\Redvine",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\mnist\\",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\mnist",
			"C:\\Users\\uids6815\\Crackcode\\tensorflow\\models\\tutorials\\image\\cifar10",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter\\src",
			"C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P2-Unscented-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter\\src\\",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter\\src\\Eigen",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-Term2\\P1-KalmanFilter",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\kalman-master",
			"C:\\Users\\uids6815\\Crackcode\\udacity\\Udacity-SelfDrivingCar-ND-Term1-master\\ComputerVision\\P5-VehicleDetection"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"TODO",
			"cppad",
			"CppAD",
			"total_square_error",
			"UpdateError",
			";\n",
			"diff_CTE",
			"error",
			"cte",
			"speed",
			"twiddle",
			"pi",
			"steering_drift",
			"from pymongo import",
			"from protobuf import",
			"from protobuf",
			"pymongo",
			"tmp_path",
			"model_weights.hdf5",
			"ecal",
			"hunter_y",
			"turn",
			"Prediction_chase",
			"Normalize",
			"SNormalizeAngle2",
			"0.0001",
			"0.001",
			"z_predmean",
			"Xsig_aug_",
			"= MatrixXd",
			"= VectorXd",
			"z_predmean",
			"int n_z = ",
			"n_z",
			"0.001",
			"0.0001",
			"todo",
			"R_radar_",
			"VectorXd",
			"TODO",
			"Xsig_aug_",
			"P_",
			"X_aug_",
			"x_aug_",
			"Xsig_pred_",
			"Xsig_aug_",
			" L ",
			"L",
			"std_yawdd_",
			"std_a_",
			"L",
			"Xsig_",
			"object_detection",
			"object",
			"keras",
			"kefas",
			"train",
			"training_data_from",
			"training_from",
			"training_data_from_mongo",
			"flow_from_mongodb",
			"ACTIONS",
			"Xsig_pred_",
			"Xsig_pred",
			"Xsig_aug_",
			"Xsig_",
			"std_a_",
			"std_a",
			"n_x",
			"n_x_",
			"print",
			"WORK_DIRECTORY",
			"maybe_download",
			"store_true",
			"self_test",
			"mnist",
			"embedding_config",
			"tmp",
			"mnist_logs",
			"mnist_log",
			"num_epochs",
			"step",
			"i",
			"cpu:0",
			"gpu:0",
			"/gpu:0",
			"cpu",
			"/tmp/cifar10_train",
			"tmp/cifar10_train",
			"_variable_on_cpu",
			"cpu:0",
			"cpu",
			"train",
			"inference",
			"tf.nn.conv2d",
			"_variable_on_cpu",
			"DATA_URL",
			"preprocess",
			"preprocess_input_data",
			"eval_dir",
			"tf.Session",
			"cpu",
			"gpu",
			"FLAGS",
			"sess",
			"main",
			"tf.summary",
			"with tf.Session",
			"tf.summary",
			"tf.get_variable",
			"summary_dir",
			"summaries_dir",
			"SummaryWriter",
			"GraphDef",
			"logdir",
			"tf.summary.scalar",
			"NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN",
			"FLAGS",
			"TODO",
			"z_pred",
			"dt",
			"TODO",
			"raw_measurements_",
			"VectorXd",
			"measurement_timestamp",
			"noise_ax_",
			"recording",
			"extract_features_plot"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Normalize",
			"x_aug_",
			"X_aug_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8010,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										186,
										191
									],
									[
										442,
										447
									],
									[
										448,
										453
									],
									[
										476,
										481
									],
									[
										640,
										645
									],
									[
										805,
										810
									],
									[
										1127,
										1132
									],
									[
										1185,
										1190
									],
									[
										1244,
										1249
									],
									[
										1419,
										1424
									],
									[
										1479,
										1484
									],
									[
										1669,
										1674
									],
									[
										1757,
										1762
									],
									[
										1941,
										1946
									],
									[
										2221,
										2226
									],
									[
										2296,
										2301
									],
									[
										2532,
										2537
									],
									[
										2786,
										2791
									],
									[
										2915,
										2920
									],
									[
										3008,
										3013
									],
									[
										3267,
										3272
									],
									[
										3548,
										3553
									],
									[
										3554,
										3559
									],
									[
										3582,
										3587
									],
									[
										3746,
										3751
									],
									[
										3893,
										3898
									],
									[
										4228,
										4233
									],
									[
										4265,
										4270
									],
									[
										4462,
										4467
									],
									[
										4631,
										4636
									],
									[
										4760,
										4765
									],
									[
										4853,
										4858
									],
									[
										5112,
										5117
									],
									[
										5483,
										5488
									],
									[
										5801,
										5806
									],
									[
										5832,
										5837
									],
									[
										5870,
										5875
									],
									[
										5916,
										5921
									],
									[
										6367,
										6372
									],
									[
										6398,
										6403
									],
									[
										6436,
										6441
									],
									[
										6482,
										6487
									],
									[
										6869,
										6874
									],
									[
										6875,
										6880
									],
									[
										6903,
										6908
									],
									[
										6986,
										6991
									],
									[
										7157,
										7162
									],
									[
										7360,
										7365
									],
									[
										7549,
										7554
									],
									[
										7642,
										7647
									],
									[
										7912,
										7917
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										4508,
										4509
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "C:\\Users\\uids6815\\Linux\\Udacity\\Udacity-SelfDrivingCar-Term2\\P5-MPC",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3600.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/MPC.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11920,
						"regions":
						{
						},
						"selection":
						[
							[
								9897,
								9897
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11919,
										11920
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										9772,
										9773
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6072.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/MPC.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 370,
						"regions":
						{
						},
						"selection":
						[
							[
								50,
								50
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										351,
										357
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Quizzes/CarND-MPC-Quizzes/mpc_to_line/src/matplotlibcpp.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22805,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										175,
										181
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										108,
										111
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-pull":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 248.0
	},
	"pinned_build_system": "",
	"project": "P5.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 337.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
